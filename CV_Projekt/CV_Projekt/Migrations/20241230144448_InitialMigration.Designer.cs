// <auto-generated />
using System;
using CV_Projekt.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV_Projekt.Migrations
{
    [DbContext(typeof(CvContext))]
    [Migration("20241230144448_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.Property<int>("CVsIds")
                        .HasColumnType("int");

                    b.Property<int>("ExperiencesIds")
                        .HasColumnType("int");

                    b.HasKey("CVsIds", "ExperiencesIds");

                    b.HasIndex("ExperiencesIds");

                    b.ToTable("CVExperience");
                });

            modelBuilder.Entity("CVProject", b =>
                {
                    b.Property<int>("CVsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsIds")
                        .HasColumnType("int");

                    b.HasKey("CVsId", "ProjectsIds");

                    b.HasIndex("ProjectsIds");

                    b.ToTable("CVProject");
                });

            modelBuilder.Entity("CV_Projekt.Models.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("ExperiencesIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("ProjectsIds")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExperiencesIds = "[]",
                            OwnerId = 1,
                            ProjectsIds = "[1]",
                            Skills = "[\"Projektledning\",\"CSS\",\"HTML\"]",
                            Views = 0
                        },
                        new
                        {
                            Id = 2,
                            ExperiencesIds = "[]",
                            OwnerId = 2,
                            ProjectsIds = "[1,2]",
                            Skills = "[\"Grafisk design\",\"Pedagogik\"]",
                            Views = 0
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.ContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactInformations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rullgatan 24A",
                            Email = "alicean12@live.se",
                            Phone = "0723892311"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Johanneslunden 7",
                            Email = "bobbergstrom@gmail.com",
                            Phone = "0724873928"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kolagränd 23",
                            Email = "charliec@live.se",
                            Phone = "0809483729"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("CVsIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");

                    b.HasDiscriminator().HasValue("Experience");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CV_Projekt.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("CVsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CVsId = "[1,1]",
                            CreatorId = 1,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 639, DateTimeKind.Local).AddTicks(7776),
                            Title = "Tidstabell för Postnord"
                        },
                        new
                        {
                            Id = 2,
                            CVsId = "[2]",
                            CreatorId = 3,
                            Description = "Skapade ett bokningssystem för SJ.",
                            EndDate = new DateTime(2024, 12, 30, 15, 44, 46, 647, DateTimeKind.Local).AddTicks(1018),
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 647, DateTimeKind.Local).AddTicks(712),
                            Title = "SJ Bokningssystem"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CVId")
                        .HasColumnType("int");

                    b.Property<string>("Descriptor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descriptor = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Descriptor = "Medicin"
                        },
                        new
                        {
                            Id = 3,
                            Descriptor = "Omvårdnad"
                        },
                        new
                        {
                            Id = 4,
                            Descriptor = "Transport"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InformationId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InformationId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8101e7a7-2d73-4be9-b47d-2aaeec31d5ef",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            InformationId = 1,
                            LastName = "Andersson",
                            LockoutEnabled = false,
                            Password = "P@ssword123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1af0b56e-2fde-4912-8ba2-df4e43dc0ef5",
                            TwoFactorEnabled = false,
                            isActive = true,
                            isPrivate = true
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62ad4815-24cf-41c8-b870-913d800f9288",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            InformationId = 2,
                            LastName = "Bergström",
                            LockoutEnabled = false,
                            Password = "P@ssword456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9bdb667-e4db-423b-b3e3-317c5fc1a35b",
                            TwoFactorEnabled = false,
                            isActive = true,
                            isPrivate = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37be7640-499c-438b-ae5d-2efecfec1fcf",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            InformationId = 3,
                            LastName = "Carlsson",
                            LockoutEnabled = false,
                            Password = "P@ssword789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5f40a84-433f-4e0a-8a59-b3b53b8e1957",
                            TwoFactorEnabled = false,
                            isActive = false,
                            isPrivate = false
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Education", b =>
                {
                    b.HasBaseType("CV_Projekt.Models.Experience");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Education");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            CVsIds = "[]",
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Karolinska Gymnasiet",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 726, DateTimeKind.Local).AddTicks(9252),
                            UserId = 2,
                            Level = "Gymnasial",
                            Program = "Vård och omsorg"
                        },
                        new
                        {
                            Id = 8,
                            CVsIds = "[]",
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Uppsala Universitet",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 727, DateTimeKind.Local).AddTicks(221),
                            UserId = 3,
                            Level = "Kandidat",
                            Program = "Arkelogi"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.OtherExperience", b =>
                {
                    b.HasBaseType("CV_Projekt.Models.Experience");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("OtherExperience");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CVsIds = "[]",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Örebro kommun",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 719, DateTimeKind.Local).AddTicks(5561),
                            UserId = 2,
                            Type = "Praktik"
                        },
                        new
                        {
                            Id = 2,
                            CVsIds = "[]",
                            Description = "En kurs i drejeri",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Kävesta Folkhögskola",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 719, DateTimeKind.Local).AddTicks(6921),
                            UserId = 1,
                            Type = "Kurs"
                        },
                        new
                        {
                            Id = 3,
                            CVsIds = "[]",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Röda korset Örebro",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 719, DateTimeKind.Local).AddTicks(7216),
                            UserId = 1,
                            Type = "Volentärarbete"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Work", b =>
                {
                    b.HasBaseType("CV_Projekt.Models.Experience");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Work");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            CVsIds = "[]",
                            Description = "Underhåller ett team i bageri/ungdomsgård",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Café Deed",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 723, DateTimeKind.Local).AddTicks(6208),
                            UserId = 1,
                            Role = "Arbetsledare"
                        },
                        new
                        {
                            Id = 5,
                            CVsIds = "[]",
                            Description = "Omvårdnad",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Uppsala Sjukhus",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 723, DateTimeKind.Local).AddTicks(7277),
                            UserId = 2,
                            Role = "Sjuksköterska"
                        },
                        new
                        {
                            Id = 6,
                            CVsIds = "[]",
                            Description = "Arbetsuppgifter",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Generiskt Företag",
                            StartDate = new DateTime(2024, 12, 30, 15, 44, 46, 723, DateTimeKind.Local).AddTicks(7292),
                            UserId = 3,
                            Role = "Arbetstitel"
                        });
                });

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.HasOne("CV_Projekt.Models.Experience", null)
                        .WithMany()
                        .HasForeignKey("CVsIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("ExperiencesIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVProject", b =>
                {
                    b.HasOne("CV_Projekt.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("CVsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("ProjectsIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Projekt.Models.CV", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CV_Projekt.Models.Experience", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Projekt.Models.Project", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CV_Projekt.Models.Tag", b =>
                {
                    b.HasOne("CV_Projekt.Models.CV", null)
                        .WithMany("Tags")
                        .HasForeignKey("CVId");
                });

            modelBuilder.Entity("CV_Projekt.Models.User", b =>
                {
                    b.HasOne("CV_Projekt.Models.ContactInformation", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("CV_Projekt.Models.CV", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
