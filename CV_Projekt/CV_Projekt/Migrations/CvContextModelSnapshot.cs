// <auto-generated />
using System;
using CV_Projekt.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV_Projekt.Migrations
{
    [DbContext(typeof(CvContext))]
    partial class CvContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("CVsId")
                        .HasColumnType("int");

                    b.HasKey("ExperienceId", "CVsId");

                    b.HasIndex("CVsId");

                    b.ToTable("CVExperience");

                    b.HasData(
                        new
                        {
                            ExperienceId = 1,
                            CVsId = 1
                        },
                        new
                        {
                            ExperienceId = 2,
                            CVsId = 1
                        },
                        new
                        {
                            ExperienceId = 3,
                            CVsId = 2
                        });
                });

            modelBuilder.Entity("CVProject", b =>
                {
                    b.Property<int>("CVsId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.HasKey("CVsId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("CVProject");

                    b.HasData(
                        new
                        {
                            CVsId = 2,
                            ProjectsId = 1
                        },
                        new
                        {
                            CVsId = 2,
                            ProjectsId = 2
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OwnerId = "1",
                            Skills = "[\"Projektledning\",\"CSS\",\"HTML\"]",
                            Views = 10
                        },
                        new
                        {
                            Id = 2,
                            OwnerId = "3",
                            Skills = "[\"Grafisk design\",\"Pedagogik\"]",
                            Views = 11
                        },
                        new
                        {
                            Id = 3,
                            OwnerId = "2",
                            Skills = "[\"Omv\\u00E5rdnad\",\"Kommunikation\"]",
                            Views = 15
                        },
                        new
                        {
                            Id = 4,
                            OwnerId = "4",
                            Skills = "[\"Eventplanering\",\"Samordning\"]",
                            Views = 8
                        },
                        new
                        {
                            Id = 5,
                            OwnerId = "5",
                            Skills = "[\"Ingenj\\u00F6rskonst\",\"Produktutveckling\"]",
                            Views = 12
                        },
                        new
                        {
                            Id = 6,
                            OwnerId = "6",
                            Skills = "[\"Forskning\",\"Biomedicin\"]",
                            Views = 9
                        },
                        new
                        {
                            Id = 7,
                            OwnerId = "7",
                            Skills = "[\"AI-utveckling\",\"Python\",\"Machine Learning\"]",
                            Views = 20
                        },
                        new
                        {
                            Id = 8,
                            OwnerId = "8",
                            Skills = "[\"Milj\\u00F6skydd\",\"Administration\"]",
                            Views = 14
                        },
                        new
                        {
                            Id = 9,
                            OwnerId = "9",
                            Skills = "[\"Undervisning\",\"Kursutveckling\"]",
                            Views = 18
                        },
                        new
                        {
                            Id = 10,
                            OwnerId = "10",
                            Skills = "[\"Patientv\\u00E5rd\",\"Ledarskap\"]",
                            Views = 25
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.ContactInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactInformations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rullgatan 24A",
                            Phone = "0723892311"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Johanneslunden 7",
                            Phone = "0724873928"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kolagränd 23",
                            Phone = "0809483729"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Mossvägen 15",
                            Phone = "0738452390"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Bäckstigen 12B",
                            Phone = "0709847328"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kullavägen 8",
                            Phone = "0762938475"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Tallbacken 4",
                            Phone = "0701938476"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Lärkträdsvägen 10",
                            Phone = "0739487261"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Allegatan 14C",
                            Phone = "0723847569"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Stenvägen 5A",
                            Phone = "0768273945"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");

                    b.HasDiscriminator().HasValue("Experience");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CV_Projekt.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReceiverDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("SenderDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hej på dig! Hur är det med dig?",
                            Date = new DateTime(2020, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "2",
                            SenderDelete = false,
                            SenderId = "1",
                            Subject = "En hälsning",
                            isRead = false
                        },
                        new
                        {
                            Id = 2,
                            Content = "Missade att du skrev, förlåt.",
                            Date = new DateTime(2020, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "1",
                            SenderDelete = false,
                            SenderId = "2",
                            Subject = "Missade",
                            isRead = false
                        },
                        new
                        {
                            Id = 3,
                            Content = "Ska vi ta en lunch imorgon?",
                            Date = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "1",
                            SenderDelete = false,
                            SenderId = "3",
                            Subject = "Lunch?",
                            isRead = false
                        },
                        new
                        {
                            Id = 4,
                            Content = "Tack för att du hjälpte mig med projektet.",
                            Date = new DateTime(2020, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "3",
                            SenderDelete = false,
                            SenderId = "1",
                            Subject = "Tack!",
                            isRead = false
                        },
                        new
                        {
                            Id = 5,
                            Content = "Kan du kika på dokumentet jag skickade?",
                            Date = new DateTime(2020, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "5",
                            SenderDelete = false,
                            SenderId = "4",
                            Subject = "Fråga",
                            isRead = false
                        },
                        new
                        {
                            Id = 6,
                            Content = "Jag har lagt till några kommentarer i ditt utkast.",
                            Date = new DateTime(2020, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "4",
                            SenderDelete = false,
                            SenderId = "5",
                            Subject = "Feedback",
                            isRead = false
                        },
                        new
                        {
                            Id = 7,
                            Content = "Glöm inte mötet imorgon kl. 10.",
                            Date = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "7",
                            SenderDelete = false,
                            SenderId = "6",
                            Subject = "Möte",
                            isRead = false
                        },
                        new
                        {
                            Id = 8,
                            Content = "Har du hunnit förbereda presentationen?",
                            Date = new DateTime(2020, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "6",
                            SenderDelete = false,
                            SenderId = "7",
                            Subject = "Presentation",
                            isRead = false
                        },
                        new
                        {
                            Id = 9,
                            Content = "Grattis på födelsedagen!",
                            Date = new DateTime(2020, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "9",
                            SenderDelete = false,
                            SenderId = "8",
                            Subject = "Grattis!",
                            isRead = false
                        },
                        new
                        {
                            Id = 10,
                            Content = "Ha en trevlig helg! Vi hörs på måndag.",
                            Date = new DateTime(2020, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReceiverDelete = false,
                            ReceiverId = "10",
                            SenderDelete = false,
                            SenderId = "9",
                            Subject = "Trevlig helg",
                            isRead = false
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = "1",
                            Description = "En app för att optimera postleveranser.",
                            EndDate = new DateTime(2011, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2010, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tidtabell för postnord"
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = "3",
                            Description = "Ett bokningssystem för SJ-resor.",
                            EndDate = new DateTime(2015, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2012, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "SJ Bokningssystem"
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = "2",
                            Description = "En databas för miljöövervakning och analys.",
                            EndDate = new DateTime(2016, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2015, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Miljödatabas"
                        },
                        new
                        {
                            Id = 4,
                            CreatorId = "4",
                            Description = "Ett verktyg för att planera och hantera evenemang.",
                            EndDate = new DateTime(2019, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2018, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Eventplaneringssystem"
                        },
                        new
                        {
                            Id = 5,
                            CreatorId = "7",
                            Description = "En AI-baserad chatbot för kundsupport.",
                            EndDate = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "AI-driven chatbot"
                        },
                        new
                        {
                            Id = 6,
                            CreatorId = "5",
                            Description = "En app för att organisera och schemalägga uppgifter.",
                            EndDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2019, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Virtuell assistent"
                        },
                        new
                        {
                            Id = 7,
                            CreatorId = "6",
                            Description = "Ett system för analys av biomedicinska data.",
                            EndDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Biomedicinsk analys"
                        },
                        new
                        {
                            Id = 8,
                            CreatorId = "8",
                            Description = "En plattform för att hantera och driva e-handel.",
                            EndDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "E-handelsplattform"
                        },
                        new
                        {
                            Id = 9,
                            CreatorId = "9",
                            Description = "Ett skattesystem med automatiserad rapportering.",
                            EndDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Avancerat skattesystem"
                        },
                        new
                        {
                            Id = 10,
                            CreatorId = "10",
                            Description = "En lösning för fjärrmedicinska konsultationer.",
                            EndDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2020, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Telemedicinplattform"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descriptor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descriptor = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Descriptor = "Medicin"
                        },
                        new
                        {
                            Id = 3,
                            Descriptor = "Omvårdnad"
                        },
                        new
                        {
                            Id = 4,
                            Descriptor = "Transport"
                        },
                        new
                        {
                            Id = 5,
                            Descriptor = "Utbildning"
                        },
                        new
                        {
                            Id = 6,
                            Descriptor = "Forskning"
                        },
                        new
                        {
                            Id = 7,
                            Descriptor = "Miljö"
                        },
                        new
                        {
                            Id = 8,
                            Descriptor = "Kultur"
                        },
                        new
                        {
                            Id = 9,
                            Descriptor = "Sport"
                        },
                        new
                        {
                            Id = 10,
                            Descriptor = "Ekonomi"
                        },
                        new
                        {
                            Id = 11,
                            Descriptor = "Teknik"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InformationId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PictureFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InformationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f913e4d1-76eb-43da-ab8d-ec65570c3101",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            InformationId = 1,
                            LastName = "Andersson",
                            LockoutEnabled = false,
                            Password = "P@ssword123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1ffc7bb-da70-4f49-9fe2-0fcbd586ace4",
                            TwoFactorEnabled = false,
                            UserName = "alicean12@live.se",
                            isActive = true,
                            isPrivate = true
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94850e4e-4cea-49e5-a0b6-21fa949e28cb",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            InformationId = 2,
                            LastName = "Bergström",
                            LockoutEnabled = false,
                            Password = "P@ssword456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93ff70eb-e061-45a1-9bd1-1769ef3bab87",
                            TwoFactorEnabled = false,
                            UserName = "bobbergstrom@gmail.com",
                            isActive = true,
                            isPrivate = false
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "570bfbfd-d637-4ba8-be86-dd76da5f4abc",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            InformationId = 3,
                            LastName = "Carlsson",
                            LockoutEnabled = false,
                            Password = "P@ssword789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd48f91a-ca80-429a-9afb-38a6e73e125d",
                            TwoFactorEnabled = false,
                            UserName = "charliec@live.se",
                            isActive = false,
                            isPrivate = false
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3d378d6-34ed-4317-bc10-f4173dc92e35",
                            EmailConfirmed = false,
                            FirstName = "Daniel",
                            InformationId = 4,
                            LastName = "Davidsson",
                            LockoutEnabled = false,
                            Password = "SecureP@ss1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d9ab2fe-31dc-489b-9ec2-fd3c2a6972a9",
                            TwoFactorEnabled = false,
                            UserName = "danield@outlook.com",
                            isActive = true,
                            isPrivate = true
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f264f15-4414-47fe-99cb-1cd10136a61f",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            InformationId = 5,
                            LastName = "Evans",
                            LockoutEnabled = false,
                            Password = "MyP@ssword2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f97e3872-c91c-4095-afb8-7bf2791cd1b0",
                            TwoFactorEnabled = false,
                            UserName = "emily.evans@hotmail.com",
                            isActive = true,
                            isPrivate = false
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "022f5561-fdf8-4425-a0ce-bd3a45e8d865",
                            EmailConfirmed = false,
                            FirstName = "Frank",
                            InformationId = 6,
                            LastName = "Fischer",
                            LockoutEnabled = false,
                            Password = "StrongP@ss3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e516d414-d05f-4c44-8355-9e390ac2a281",
                            TwoFactorEnabled = false,
                            UserName = "frankfischer@gmail.com",
                            isActive = true,
                            isPrivate = true
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55a3e7bb-9ede-4e0a-8e31-9ec28639845e",
                            EmailConfirmed = false,
                            FirstName = "Grace",
                            InformationId = 7,
                            LastName = "Gustafsson",
                            LockoutEnabled = false,
                            Password = "GracefulP@ss4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a4601d58-4bda-483b-9644-f3601f0e8324",
                            TwoFactorEnabled = false,
                            UserName = "grace.gustafsson@live.se",
                            isActive = false,
                            isPrivate = false
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "742a4faf-d367-4e26-9652-41145769b5b8",
                            EmailConfirmed = false,
                            FirstName = "Hanna",
                            InformationId = 8,
                            LastName = "Holm",
                            LockoutEnabled = false,
                            Password = "H@nnasP@ss5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f4ab1f3-122c-4cb1-bd37-668185f1ca6b",
                            TwoFactorEnabled = false,
                            UserName = "hanna.holm@gmail.com",
                            isActive = true,
                            isPrivate = true
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f36d5f4c-26b0-4ad2-9fdf-6b72b75347ea",
                            EmailConfirmed = false,
                            FirstName = "Ian",
                            InformationId = 9,
                            LastName = "Ingemarsson",
                            LockoutEnabled = false,
                            Password = "I@nsSecure6",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be73400e-58a3-49ab-af11-ce16989c8294",
                            TwoFactorEnabled = false,
                            UserName = "ian.ingemarsson@outlook.com",
                            isActive = true,
                            isPrivate = false
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b8d5ec9-f0ef-4528-a331-8e0510a1c615",
                            EmailConfirmed = false,
                            FirstName = "Julia",
                            InformationId = 10,
                            LastName = "Jonsson",
                            LockoutEnabled = false,
                            Password = "JuliasP@ss7",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94be92c2-4de8-4e00-8403-1bcfb83be44c",
                            TwoFactorEnabled = false,
                            UserName = "julia.jonsson@yahoo.com",
                            isActive = false,
                            isPrivate = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("JoinedProjectsId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JoinedProjectsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("TagUser", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TagId", "UserId");

                    b.HasIndex("TagsId");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersId");

                    b.ToTable("TagUser");
                });

            modelBuilder.Entity("CV_Projekt.Models.Education", b =>
                {
                    b.HasBaseType("CV_Projekt.Models.Experience");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Education");

                    b.HasData(
                        new
                        {
                            Id = 21,
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Karolinska Gymnasiet",
                            StartDate = new DateTime(2016, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2",
                            Level = "Gymnasial",
                            Program = "Vård och omsorg"
                        },
                        new
                        {
                            Id = 22,
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Uppsala Universitet",
                            StartDate = new DateTime(2010, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3",
                            Level = "Kandidat",
                            Program = "Arkelogi"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Specialisering inom hållbar utveckling",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Lund Universitet",
                            StartDate = new DateTime(2018, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "4",
                            Level = "Master",
                            Program = "Miljövetenskap"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Fokus på produktutveckling",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Chalmers Tekniska Högskola",
                            StartDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "5",
                            Level = "Master",
                            Program = "Maskinteknik"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Med inriktning på etnologi",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Göteborg Universitet",
                            StartDate = new DateTime(2015, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "6",
                            Level = "Kandidat",
                            Program = "Kulturvetenskap"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Med fokus på artificiell intelligens",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "KTH Royal Institute of Technology",
                            StartDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "7",
                            Level = "Master",
                            Program = "Datavetenskap"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Specialisering inom internationell handel",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Stockholms Universitet",
                            StartDate = new DateTime(2017, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "8",
                            Level = "Kandidat",
                            Program = "Ekonomi"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Studier inom ekologi och naturvård",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Umeå Universitet",
                            StartDate = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "9",
                            Level = "Kandidat",
                            Program = "Biologi"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Forskning inom kvantmekanik",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Linköping Universitet",
                            StartDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "10",
                            Level = "Doktorand",
                            Program = "Teknisk fysik"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.OtherExperience", b =>
                {
                    b.HasBaseType("CV_Projekt.Models.Experience");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("OtherExperience");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Örebro kommun",
                            StartDate = new DateTime(2016, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2",
                            Type = "Praktik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "En kurs i drejeri",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Kävesta Folkhögskola",
                            StartDate = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1",
                            Type = "Kurs"
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Röda korset Örebro",
                            StartDate = new DateTime(2022, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1",
                            Type = "Volentärarbete"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sommarjobb som forskningsassistent",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Linköping universitet",
                            StartDate = new DateTime(2018, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3",
                            Type = "Sommarjobb"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Praktik inom medicinsk forskning",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Karolinska Institutet",
                            StartDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "4",
                            Type = "Praktik"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Deltog i hjälparbete för flyktingar",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Svenska Röda Korset",
                            StartDate = new DateTime(2022, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "5",
                            Type = "Volentärarbete"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Kurs i hållbart byggande",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Chalmers Tekniska Högskola",
                            StartDate = new DateTime(2019, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "6",
                            Type = "Kurs"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Projektarbete inom AI-utveckling",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Örebro Universitet",
                            StartDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "7",
                            Type = "Projektarbete"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Volontärarbete inom miljöskydd",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Naturskyddsföreningen",
                            StartDate = new DateTime(2020, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "8",
                            Type = "Volentärarbete"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Deltog i en workshop om ledarskap",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Uppsala Universitet",
                            StartDate = new DateTime(2021, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "9",
                            Type = "Workshop"
                        });
                });

            modelBuilder.Entity("CV_Projekt.Models.Work", b =>
                {
                    b.HasBaseType("CV_Projekt.Models.Experience");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Work");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Description = "Underhåller ett team i bageri/ungdomsgård",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Café Deed",
                            StartDate = new DateTime(2020, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1",
                            Role = "Arbetsledare"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Omvårdnad",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Uppsala Sjukhus",
                            StartDate = new DateTime(2019, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "2",
                            Role = "Sjuksköterska"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Arbetsuppgifter",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Generiskt Företag",
                            StartDate = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3",
                            Role = "Arbetstitel"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Ansvarig för eventplanering och samordning",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Stockholms Stad",
                            StartDate = new DateTime(2018, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "4",
                            Role = "Eventkoordinator"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Utveckling och testning av nya bilmodeller",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Volvo Cars",
                            StartDate = new DateTime(2022, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "5",
                            Role = "Ingenjör"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Forskning inom biomedicin",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Karolinska Institutet",
                            StartDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "6",
                            Role = "Forskningsassistent"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Hantering av deklarationer och rådgivning",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Skatteverket",
                            StartDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "7",
                            Role = "Handläggare"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Administration och projektstöd",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Länsstyrelsen",
                            StartDate = new DateTime(2019, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "8",
                            Role = "Projektassistent"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Undervisning och kursutveckling",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Luleå Tekniska Universitet",
                            StartDate = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "9",
                            Role = "Universitetslärare"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Patientvård och ledning av vårdteam",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "Norrlands Universitetssjukhus",
                            StartDate = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "10",
                            Role = "Läkare"
                        });
                });

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.HasOne("CV_Projekt.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.Experience", null)
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CVProject", b =>
                {
                    b.HasOne("CV_Projekt.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Projekt.Models.CV", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", "Owner")
                        .WithOne()
                        .HasForeignKey("CV_Projekt.Models.CV", "OwnerId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CV_Projekt.Models.Experience", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Projekt.Models.Message", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", "Receiver")
                        .WithMany("RecievedMessages")
                        .HasForeignKey("ReceiverId")
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CV_Projekt.Models.Project", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", "Creator")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreatorId")
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("CV_Projekt.Models.User", b =>
                {
                    b.HasOne("CV_Projekt.Models.ContactInformation", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CV_Projekt.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("CV_Projekt.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("JoinedProjectsId")
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .IsRequired();
                });

            modelBuilder.Entity("TagUser", b =>
                {
                    b.HasOne("CV_Projekt.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.HasOne("CV_Projekt.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Projekt.Models.User", b =>
                {
                    b.Navigation("CreatedProjects");

                    b.Navigation("RecievedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
